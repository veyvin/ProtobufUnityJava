// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResData.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protobuf {

  /// <summary>Holder for reflection information generated from ResData.proto</summary>
  public static partial class ResDataReflection {

    #region Descriptor
    /// <summary>File descriptor for ResData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1SZXNEYXRhLnByb3RvEghwcm90b2J1ZiIkCgZSZXNTU1MSGgoDcmVzGAEg",
            "AygLMg0ucHJvdG9idWYuUmVzIpsCCgNSZXMSDwoHUmVzVHlwZRgBIAEoCRIP",
            "CgdSZXNOYW1lGAIgASgJEg8KB1Jlc0Nvc3QYAyABKAkSDwoHUmVzVW5pdBgE",
            "IAEoCRIUCgxSZXNNb2RlbE5hbWUYBSABKAkSEgoKUmVzUGljTmFtZRgGIAEo",
            "CRIRCglSZXNBQk5hbWUYByABKAkSFAoMUmVzU2x0QUJOYW1lGAggASgJEhIK",
            "ClJlc0FkZFRpbWUYCSABKAkSEQoJUmVzQWRkTWFuGAogASgJEhEKCVJlc1Vw",
            "VGltZRgLIAEoCRIQCghSZXNVcE1hbhgMIAEoCRIQCghSZXNNb2RlbBgNIAEo",
            "DBIOCgZSZXNQaWMYDiABKAwSDwoHUmVzR3VpZBgPIAEoCUIuCiNjb20uc2dj",
            "Yy5ib2NoYW8uZ2d0Lm1hbmFnZS5wcm90b2J1ZkIHUmVzRGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.ResSSS), global::Protobuf.ResSSS.Parser, new[]{ "Res" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Res), global::Protobuf.Res.Parser, new[]{ "ResType", "ResName", "ResCost", "ResUnit", "ResModelName", "ResPicName", "ResABName", "ResSltABName", "ResAddTime", "ResAddMan", "ResUpTime", "ResUpMan", "ResModel", "ResPic", "ResGuid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ResSSS : pb::IMessage<ResSSS> {
    private static readonly pb::MessageParser<ResSSS> _parser = new pb::MessageParser<ResSSS>(() => new ResSSS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResSSS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.ResDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResSSS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResSSS(ResSSS other) : this() {
      res_ = other.res_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResSSS Clone() {
      return new ResSSS(this);
    }

    /// <summary>Field number for the "res" field.</summary>
    public const int ResFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protobuf.Res> _repeated_res_codec
        = pb::FieldCodec.ForMessage(10, global::Protobuf.Res.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.Res> res_ = new pbc::RepeatedField<global::Protobuf.Res>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.Res> Res {
      get { return res_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResSSS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResSSS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!res_.Equals(other.res_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= res_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      res_.WriteTo(output, _repeated_res_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += res_.CalculateSize(_repeated_res_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResSSS other) {
      if (other == null) {
        return;
      }
      res_.Add(other.res_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            res_.AddEntriesFrom(input, _repeated_res_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Res : pb::IMessage<Res> {
    private static readonly pb::MessageParser<Res> _parser = new pb::MessageParser<Res>(() => new Res());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Res> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.ResDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Res() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Res(Res other) : this() {
      resType_ = other.resType_;
      resName_ = other.resName_;
      resCost_ = other.resCost_;
      resUnit_ = other.resUnit_;
      resModelName_ = other.resModelName_;
      resPicName_ = other.resPicName_;
      resABName_ = other.resABName_;
      resSltABName_ = other.resSltABName_;
      resAddTime_ = other.resAddTime_;
      resAddMan_ = other.resAddMan_;
      resUpTime_ = other.resUpTime_;
      resUpMan_ = other.resUpMan_;
      resModel_ = other.resModel_;
      resPic_ = other.resPic_;
      resGuid_ = other.resGuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Res Clone() {
      return new Res(this);
    }

    /// <summary>Field number for the "ResType" field.</summary>
    public const int ResTypeFieldNumber = 1;
    private string resType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResType {
      get { return resType_; }
      set {
        resType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResName" field.</summary>
    public const int ResNameFieldNumber = 2;
    private string resName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResName {
      get { return resName_; }
      set {
        resName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResCost" field.</summary>
    public const int ResCostFieldNumber = 3;
    private string resCost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResCost {
      get { return resCost_; }
      set {
        resCost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResUnit" field.</summary>
    public const int ResUnitFieldNumber = 4;
    private string resUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResUnit {
      get { return resUnit_; }
      set {
        resUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResModelName" field.</summary>
    public const int ResModelNameFieldNumber = 5;
    private string resModelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResModelName {
      get { return resModelName_; }
      set {
        resModelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResPicName" field.</summary>
    public const int ResPicNameFieldNumber = 6;
    private string resPicName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResPicName {
      get { return resPicName_; }
      set {
        resPicName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResABName" field.</summary>
    public const int ResABNameFieldNumber = 7;
    private string resABName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResABName {
      get { return resABName_; }
      set {
        resABName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResSltABName" field.</summary>
    public const int ResSltABNameFieldNumber = 8;
    private string resSltABName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResSltABName {
      get { return resSltABName_; }
      set {
        resSltABName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResAddTime" field.</summary>
    public const int ResAddTimeFieldNumber = 9;
    private string resAddTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResAddTime {
      get { return resAddTime_; }
      set {
        resAddTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResAddMan" field.</summary>
    public const int ResAddManFieldNumber = 10;
    private string resAddMan_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResAddMan {
      get { return resAddMan_; }
      set {
        resAddMan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResUpTime" field.</summary>
    public const int ResUpTimeFieldNumber = 11;
    private string resUpTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResUpTime {
      get { return resUpTime_; }
      set {
        resUpTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResUpMan" field.</summary>
    public const int ResUpManFieldNumber = 12;
    private string resUpMan_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResUpMan {
      get { return resUpMan_; }
      set {
        resUpMan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResModel" field.</summary>
    public const int ResModelFieldNumber = 13;
    private pb::ByteString resModel_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ResModel {
      get { return resModel_; }
      set {
        resModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResPic" field.</summary>
    public const int ResPicFieldNumber = 14;
    private pb::ByteString resPic_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ResPic {
      get { return resPic_; }
      set {
        resPic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResGuid" field.</summary>
    public const int ResGuidFieldNumber = 15;
    private string resGuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResGuid {
      get { return resGuid_; }
      set {
        resGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Res);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Res other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResType != other.ResType) return false;
      if (ResName != other.ResName) return false;
      if (ResCost != other.ResCost) return false;
      if (ResUnit != other.ResUnit) return false;
      if (ResModelName != other.ResModelName) return false;
      if (ResPicName != other.ResPicName) return false;
      if (ResABName != other.ResABName) return false;
      if (ResSltABName != other.ResSltABName) return false;
      if (ResAddTime != other.ResAddTime) return false;
      if (ResAddMan != other.ResAddMan) return false;
      if (ResUpTime != other.ResUpTime) return false;
      if (ResUpMan != other.ResUpMan) return false;
      if (ResModel != other.ResModel) return false;
      if (ResPic != other.ResPic) return false;
      if (ResGuid != other.ResGuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResType.Length != 0) hash ^= ResType.GetHashCode();
      if (ResName.Length != 0) hash ^= ResName.GetHashCode();
      if (ResCost.Length != 0) hash ^= ResCost.GetHashCode();
      if (ResUnit.Length != 0) hash ^= ResUnit.GetHashCode();
      if (ResModelName.Length != 0) hash ^= ResModelName.GetHashCode();
      if (ResPicName.Length != 0) hash ^= ResPicName.GetHashCode();
      if (ResABName.Length != 0) hash ^= ResABName.GetHashCode();
      if (ResSltABName.Length != 0) hash ^= ResSltABName.GetHashCode();
      if (ResAddTime.Length != 0) hash ^= ResAddTime.GetHashCode();
      if (ResAddMan.Length != 0) hash ^= ResAddMan.GetHashCode();
      if (ResUpTime.Length != 0) hash ^= ResUpTime.GetHashCode();
      if (ResUpMan.Length != 0) hash ^= ResUpMan.GetHashCode();
      if (ResModel.Length != 0) hash ^= ResModel.GetHashCode();
      if (ResPic.Length != 0) hash ^= ResPic.GetHashCode();
      if (ResGuid.Length != 0) hash ^= ResGuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResType);
      }
      if (ResName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResName);
      }
      if (ResCost.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ResCost);
      }
      if (ResUnit.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ResUnit);
      }
      if (ResModelName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ResModelName);
      }
      if (ResPicName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ResPicName);
      }
      if (ResABName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ResABName);
      }
      if (ResSltABName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ResSltABName);
      }
      if (ResAddTime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ResAddTime);
      }
      if (ResAddMan.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ResAddMan);
      }
      if (ResUpTime.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ResUpTime);
      }
      if (ResUpMan.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ResUpMan);
      }
      if (ResModel.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(ResModel);
      }
      if (ResPic.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(ResPic);
      }
      if (ResGuid.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(ResGuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResType);
      }
      if (ResName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResName);
      }
      if (ResCost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResCost);
      }
      if (ResUnit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResUnit);
      }
      if (ResModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResModelName);
      }
      if (ResPicName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResPicName);
      }
      if (ResABName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResABName);
      }
      if (ResSltABName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResSltABName);
      }
      if (ResAddTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResAddTime);
      }
      if (ResAddMan.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResAddMan);
      }
      if (ResUpTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResUpTime);
      }
      if (ResUpMan.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResUpMan);
      }
      if (ResModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ResModel);
      }
      if (ResPic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ResPic);
      }
      if (ResGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResGuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Res other) {
      if (other == null) {
        return;
      }
      if (other.ResType.Length != 0) {
        ResType = other.ResType;
      }
      if (other.ResName.Length != 0) {
        ResName = other.ResName;
      }
      if (other.ResCost.Length != 0) {
        ResCost = other.ResCost;
      }
      if (other.ResUnit.Length != 0) {
        ResUnit = other.ResUnit;
      }
      if (other.ResModelName.Length != 0) {
        ResModelName = other.ResModelName;
      }
      if (other.ResPicName.Length != 0) {
        ResPicName = other.ResPicName;
      }
      if (other.ResABName.Length != 0) {
        ResABName = other.ResABName;
      }
      if (other.ResSltABName.Length != 0) {
        ResSltABName = other.ResSltABName;
      }
      if (other.ResAddTime.Length != 0) {
        ResAddTime = other.ResAddTime;
      }
      if (other.ResAddMan.Length != 0) {
        ResAddMan = other.ResAddMan;
      }
      if (other.ResUpTime.Length != 0) {
        ResUpTime = other.ResUpTime;
      }
      if (other.ResUpMan.Length != 0) {
        ResUpMan = other.ResUpMan;
      }
      if (other.ResModel.Length != 0) {
        ResModel = other.ResModel;
      }
      if (other.ResPic.Length != 0) {
        ResPic = other.ResPic;
      }
      if (other.ResGuid.Length != 0) {
        ResGuid = other.ResGuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ResType = input.ReadString();
            break;
          }
          case 18: {
            ResName = input.ReadString();
            break;
          }
          case 26: {
            ResCost = input.ReadString();
            break;
          }
          case 34: {
            ResUnit = input.ReadString();
            break;
          }
          case 42: {
            ResModelName = input.ReadString();
            break;
          }
          case 50: {
            ResPicName = input.ReadString();
            break;
          }
          case 58: {
            ResABName = input.ReadString();
            break;
          }
          case 66: {
            ResSltABName = input.ReadString();
            break;
          }
          case 74: {
            ResAddTime = input.ReadString();
            break;
          }
          case 82: {
            ResAddMan = input.ReadString();
            break;
          }
          case 90: {
            ResUpTime = input.ReadString();
            break;
          }
          case 98: {
            ResUpMan = input.ReadString();
            break;
          }
          case 106: {
            ResModel = input.ReadBytes();
            break;
          }
          case 114: {
            ResPic = input.ReadBytes();
            break;
          }
          case 122: {
            ResGuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
